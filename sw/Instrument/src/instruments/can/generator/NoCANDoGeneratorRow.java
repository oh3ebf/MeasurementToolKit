/***********************************************************
 * Software: instrument client
 * Module:   NoCANDo generator signal row class
 * Version:  0.1
 * Licence:  GPL2
 *
 * Owner: Kim Kristo
 * Date creation : 5.6.2013
 *
 ***********************************************************/
package instruments.can.generator;

import instruments.can.interfaces.NoCANDoFrameEditorInterface;
import instruments.can.interfaces.NoCANDoGeneratorRowInterface;

public class NoCANDoGeneratorRow extends javax.swing.JPanel implements NoCANDoFrameEditorInterface {

    private NoCANDoGeneratorRawFrameEditor editor = null;
    private NoCANDoGeneratorRowInterface rowIf = null;
    private NoCANDoGeneratorDataObject data;
    private String id = null;
    
    /** Creates new form NoCANDoGeneratorRow */
    public NoCANDoGeneratorRow(NoCANDoGeneratorRowInterface rowI) {
        rowIf = rowI;
        data = new NoCANDoGeneratorDataObject();
                
        initComponents();
    }

    /** Function implements callback from frame editor 
     * 
     * @param obj edited row data object
     * 
     */
    
    public void updateValues(NoCANDoGeneratorDataObject obj) {
        String tmp = null;
        // store modified values
        data = obj;
        
        // update display fields
        idTextField.setText(Integer.toString(data.getCanData().getId()));
        busTextField.setText(data.getBus());    
        
        // free editor memory
        editor = null;
        
        // set enable and add to server
        enableCheckBox.setSelected(true);        
        tmp = rowIf.update(id, obj);
        
        if(id == null) {
            id = tmp;
        }                
    }
    
    /** Function returns measurement id
     * 
     * @return id
     */
    
    public String getId() {
        return(id);
    }
    
    /** Function return row data object
     * 
     * @return data object
     */
    
    public NoCANDoGeneratorDataObject getDataObject() {
        return(data);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        AddMenuItem = new javax.swing.JMenuItem();
        editMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        enableCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        busTextField = new javax.swing.JTextField();

        AddMenuItem.setText("Add");
        AddMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(AddMenuItem);

        editMenuItem.setText("Edit...");
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(editMenuItem);

        deleteMenuItem.setText("Delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(deleteMenuItem);

        setBackground(new java.awt.Color(213, 218, 228));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setComponentPopupMenu(jPopupMenu1);

        enableCheckBox.setBackground(new java.awt.Color(213, 218, 228));
        enableCheckBox.setText("Enable");
        enableCheckBox.setBorderPainted(true);
        enableCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enableCheckBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Can Id:");
        jLabel1.setMaximumSize(new java.awt.Dimension(40, 22));
        jLabel1.setMinimumSize(new java.awt.Dimension(40, 22));
        jLabel1.setPreferredSize(new java.awt.Dimension(60, 22));
        jLabel1.setRequestFocusEnabled(false);

        idTextField.setEditable(false);
        idTextField.setMaximumSize(new java.awt.Dimension(100, 22));
        idTextField.setMinimumSize(new java.awt.Dimension(100, 22));
        idTextField.setPreferredSize(new java.awt.Dimension(80, 22));

        jLabel2.setText("Can bus:");
        jLabel2.setMaximumSize(new java.awt.Dimension(40, 22));
        jLabel2.setMinimumSize(new java.awt.Dimension(40, 22));
        jLabel2.setPreferredSize(new java.awt.Dimension(70, 22));
        jLabel2.setRequestFocusEnabled(false);

        busTextField.setEditable(false);
        busTextField.setMaximumSize(new java.awt.Dimension(100, 22));
        busTextField.setMinimumSize(new java.awt.Dimension(100, 22));
        busTextField.setPreferredSize(new java.awt.Dimension(80, 22));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(enableCheckBox)
                .addGap(3, 3, 3)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(busTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(enableCheckBox)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(busTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void EditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditMenuItemActionPerformed
        // create editor if not already exists
        if (editor == null) {
            editor = new NoCANDoGeneratorRawFrameEditor(rowIf.getBusProperties(), data, this);
        }

        // put window to desktop
        if (rowIf != null) {
            rowIf.addToDesktop(editor);
        }
}//GEN-LAST:event_EditMenuItemActionPerformed

    private void DeleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteMenuItemActionPerformed
        // remove can message from generator
        if ((rowIf != null) && (id != null) && (!id.isEmpty())) {
            rowIf.removeRow(id, this);       
        }
    }//GEN-LAST:event_DeleteMenuItemActionPerformed

    private void AddMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddMenuItemActionPerformed
        // add new can message to generator
        if (rowIf != null) {
            rowIf.addNewRow();
        }
    }//GEN-LAST:event_AddMenuItemActionPerformed

    private void enableCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enableCheckBoxActionPerformed
        // check if command is created to server
        if((id != null) && (!id.isEmpty())) {
            rowIf.setMeasurementState(id, data, enableCheckBox.isSelected());
        }
}//GEN-LAST:event_enableCheckBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddMenuItem;
    private javax.swing.JTextField busTextField;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem editMenuItem;
    private javax.swing.JCheckBox enableCheckBox;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    // End of variables declaration//GEN-END:variables
}
