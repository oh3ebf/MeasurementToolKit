/***********************************************************
 * Software: instrument client
 * Module:   Instrument user inetrface base class
 * Version:  0.1
 * Licence:  GPL2
 *
 * Owner: Kim Kristo
 * Date creation : 29.4.2014
 *
 ***********************************************************/
package components;

import interfaces.MessageCallbackInterface;
import interfaces.MessageInterface;
import interfaces.OptionsInterface;
import java.awt.Dimension;
import java.util.Hashtable;
import javax.swing.JInternalFrame;
import oh3ebf.lib.common.utilities.ConfigurationInstance;
import org.apache.log4j.Logger;
import yami.ParamSet;

public class DeviceBase extends javax.swing.JInternalFrame
        implements MessageCallbackInterface, OptionsInterface {

    protected static Logger logger;
    protected ConfigurationInstance config;
    protected DeviceMessage message;

    /** Creates new form DeviceBase */
    public DeviceBase(String name, Hashtable<String, String> properties, MessageInterface msg) {
        // get configuration handler
        config = ConfigurationInstance.getConfiguration();
    }

    /** Function adds new frame to desktop
     * 
     * @param e frame to add
     * 
     */
    public void addToDesktop(JInternalFrame f) {
        // set loaction on desktop        
        Dimension desktopSize = this.getDesktopPane().getSize();
        Dimension jInternalFrameSize = f.getSize();
        f.setLocation((desktopSize.width - jInternalFrameSize.width) / 2,
                (desktopSize.height - jInternalFrameSize.height) / 2);

        // add dialog to desktop
        this.getParent().add(f);
        // bring dialog to top window
        this.moveToBack();
    }

    /** Function restores setting from file
     * 
     * @param r reference to xml file reader
     */
    public void loadSettings(XmlReader r) {

    }

    /** Function stores scope setting to file
     * 
     * @param file to save
     */
    public void saveSettings(XmlWriter w) {

    }

    /** Function sends message
     *
     * @param param message parameters
     *
     * @return true/false
     *
     */
    public boolean DataStreamCallback(ParamSet param) {
        logger.debug("data stream parametercount: " + param.getNumberOfEntries());

        try {
            // check for valid message
            if (param.extractString().equals(DeviceMessage.StreamDataOk)) {
                for (int i = 0; i < param.getNumberOfEntries() - 1; i++) {
                // add or update data to model
                //dataTreeModel.addMessage(param.extractBinary());
                }
            } else {
                logger.warn("streaming data fail");
            }
        } catch (Exception ex) {
            logger.error("failed to extract parameter from response" + ex.getMessage());
        }

        return (true);
    }

    /** Function reads setting from file
     * 
     */
    public void update() {

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
