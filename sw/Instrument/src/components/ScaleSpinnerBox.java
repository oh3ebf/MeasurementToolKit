/***********************************************************
 * Software: instrument client
 * Module:   spinner box class
 * Version:  0.2
 * Licence:  GPL2
 *
 * Owner: Kim Kristo
 * Date creation : 14.9.2012
 *
 ***********************************************************/
package components;

import interfaces.ScaleSpinnerBoxInterface;
import java.awt.Color;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

public class ScaleSpinnerBox extends javax.swing.JPanel {

    private ScaleSpinnerBoxInterface box;
    private int boxNumber = 0;

    /** Creates new form temp */
    public ScaleSpinnerBox(ScaleSpinnerBoxInterface i, int n, String label, boolean state, SpinnerModel model1, SpinnerModel model2) {
        box = i;
        boxNumber = n;

        initComponents();

        // customize components
        jLabel1.setText(label);
        jCheckBox1.setSelected(state);
        jSpinner1.setModel(model1);
        jSpinner2.setModel(model2);
        setEnabled(state);
    }

    /** Function returns state of check box
     *
     * @return state of check box
     * 
     */
    public boolean isSelected() {
        return (jCheckBox1.isSelected());
    }

    /** Function set state of check box
     * 
     * @param state for chack box
     * 
     */
    public void setSelected(boolean state) {
        jCheckBox1.setSelected(state);
        setEnabled(state);
    }

    /** Function sets state of spinners controls
     *
     * @param state eneable or disable spinners from ui
     * 
     */
    @Override
    public void setEnabled(boolean state) {
        // enable controls       
        jSpinner1.setEnabled(state);
        jSpinner2.setEnabled(state);
        repaint();
    }

    /** Function sets new background color
     * 
     * @param bg color for background
     * 
     */
    public void setBgColor(Color bg) {
        this.setBackground(bg);
        jCheckBox1.setBackground(bg);
        jSpinner1.setBackground(bg);
        jSpinner2.setBackground(bg);
    }

    /** Functions sets backgroud color of spinner text fields
     * 
     * @param c
     * 
     */
    public void setSpinnerColors(Color bg, Color fg) {
        JTextField tf = ((JSpinner.DefaultEditor) jSpinner1.getEditor()).getTextField();
        tf.setBackground(bg);
        tf.setForeground(fg);

        tf = ((JSpinner.DefaultEditor) jSpinner2.getEditor()).getTextField();
        tf.setBackground(bg);
        tf.setForeground(fg);
    }

    /** Function sets spinner 1 value
     * 
     * @param value as string
     */
    
    public void setSpinner1Value(String value) {
        ((SpinnerListModel)jSpinner1.getModel()).setValue(value);
    }
    
    /** Function returns current value of spinner 1
     * 
     * @return value as string
     */
    
    public String getSpinner1Value() {
        return(((SpinnerListModel)jSpinner1.getModel()).getValue().toString());
    }
    
    /** Function sets spinner 2 value
     * 
     * @param value as double
     */
    
    public void setSpinner2Value(double value) {
        ((SpinnerNumberModel)jSpinner2.getModel()).setValue(value);
    }
    
    /** Function returns current value of spinner 1
     * 
     * @return value as string
     */
    
    public double getSpinner2Value() {
        return((Double)jSpinner2.getModel().getValue());
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Text");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jLabel1, gridBagConstraints);

        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 1, 0);
        add(jCheckBox1, gridBagConstraints);

        jSpinner1.setMaximumSize(new java.awt.Dimension(70, 24));
        jSpinner1.setMinimumSize(new java.awt.Dimension(100, 24));
        jSpinner1.setPreferredSize(new java.awt.Dimension(70, 24));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.ipady = -4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jSpinner1, gridBagConstraints);

        jSpinner2.setMaximumSize(new java.awt.Dimension(70, 24));
        jSpinner2.setMinimumSize(new java.awt.Dimension(70, 24));
        jSpinner2.setPreferredSize(new java.awt.Dimension(70, 24));
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 42;
        gridBagConstraints.ipady = -4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(jSpinner2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        if (box != null) {
            // run callback code if available
            box.SpinnerBox2ValueChanged(boxNumber, jSpinner2.getValue());
        }
    }//GEN-LAST:event_jSpinner2StateChanged

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        if (box != null) {
            // run callback code if available
            box.SpinnerBox1ValueChanged(boxNumber, jSpinner1.getValue());
        }
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // set new visual state
        setEnabled(jCheckBox1.isSelected());

        if (box != null) {
            // run callback code if available
            box.SpinnerBoxisEnabled(boxNumber, jCheckBox1.isSelected());

        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    // End of variables declaration//GEN-END:variables
}
